/* f1df5ec088753a0821232b50cf8264f961e91920
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client'
export declare type Maybe<T> = T | null
export declare type Exact<
  T extends {
    [key: string]: unknown
  }
> = {
  [K in keyof T]: T[K]
}
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  {
    [SubKey in K]?: Maybe<T[SubKey]>
  }
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  {
    [SubKey in K]: Maybe<T[SubKey]>
  }
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  Uuid: any
  /** The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1. */
  Long: any
  /** The `DateTime` scalar represents an ISO-8601 compliant date time type. */
  DateTime: any
}
export declare type Query = {
  __typename?: 'Query'
  products: Array<Product>
  product: Product
  orders: Array<Order>
  order: Order
}
export declare type QueryProductArgs = {
  id: Scalars['Uuid']
}
export declare type QueryOrderArgs = {
  id: Scalars['Uuid']
}
export declare type Mutation = {
  __typename?: 'Mutation'
  addProduct: AddProductPayload
  addOrder: AddOrderPayload
}
export declare type MutationAddProductArgs = {
  input: AddProductInput
}
export declare type MutationAddOrderArgs = {
  input: AddOrderInput
}
export declare type AddProductPayload = {
  __typename?: 'AddProductPayload'
  product: Product
}
export declare type Order = {
  __typename?: 'Order'
  id: Scalars['Uuid']
  customer: Customer
  items: Array<OrderItem>
  orderStatus: OrderStatus
}
export declare type Product = {
  __typename?: 'Product'
  id: Scalars['Uuid']
  name: Scalars['String']
  description: Scalars['String']
  price: Scalars['Long']
  begins: Scalars['DateTime']
  expires: Scalars['DateTime']
  quantity: Scalars['Long']
  imageUrl: Scalars['String']
  created: Scalars['DateTime']
  lockedToZipCode: Scalars['Boolean']
  zipCode: Scalars['String']
}
export declare type AddProductInput = {
  name: Scalars['String']
  description: Scalars['String']
  price: Scalars['Long']
  begins: Scalars['DateTime']
  expires: Scalars['DateTime']
  quantity: Scalars['Long']
  imageUrl: Scalars['String']
  lockedToZipCode?: Scalars['Boolean']
  zipCode?: Scalars['String']
}
export declare type AddOrderPayload = {
  __typename?: 'AddOrderPayload'
  order: Order
}
export declare type AddOrderInput = {
  customer: AddCustomerInput
  items: Array<AddOrderItemInput>
}
export declare enum OrderStatus {
  NotPayed = 'NOT_PAYED',
  Processing = 'PROCESSING',
  Payed = 'PAYED',
  PendingShipping = 'PENDING_SHIPPING',
  Delivered = 'DELIVERED',
}
export declare type OrderItem = {
  __typename?: 'OrderItem'
  quantity: Scalars['Long']
  productId: Scalars['Uuid']
  product: Product
}
export declare type Customer = {
  __typename?: 'Customer'
  id: Scalars['Uuid']
  fullName: Scalars['String']
  address: Scalars['String']
  zipCode: Scalars['String']
  phoneNumber?: Maybe<Scalars['String']>
  email: Scalars['String']
}
export declare type AddCustomerInput = {
  fullName: Scalars['String']
  address: Scalars['String']
  zipCode: Scalars['String']
  phoneNumber?: Maybe<Scalars['String']>
  email: Scalars['String']
}
export declare type AddOrderItemInput = {
  quantity: Scalars['Long']
  productId: Scalars['Uuid']
}
export declare type GetProductsQueryVariables = Exact<{
  [key: string]: never
}>
export declare type GetProductsQuery = {
  __typename?: 'Query'
} & {
  products: Array<
    {
      __typename?: 'Product'
    } & Pick<Product, 'id' | 'name' | 'imageUrl'>
  >
}
export declare type GetProductByIdQueryVariables = Exact<{
  productId: Scalars['Uuid']
}>
export declare type GetProductByIdQuery = {
  __typename?: 'Query'
} & {
  product: {
    __typename?: 'Product'
  } & Pick<Product, 'id' | 'name' | 'description' | 'quantity' | 'imageUrl'>
}
export declare const GetProductsDocument: Apollo.DocumentNode
/**
 * __useGetProductsQuery__
 *
 * To run a query within a React component, call `useGetProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProductsQuery({
 *   variables: {
 *   },
 * });
 */
export declare function useGetProductsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetProductsQuery,
    GetProductsQueryVariables
  >
): Apollo.QueryResult<
  GetProductsQuery,
  Exact<{
    [key: string]: never
  }>
>
export declare function useGetProductsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProductsQuery,
    GetProductsQueryVariables
  >
): Apollo.QueryTuple<
  GetProductsQuery,
  Exact<{
    [key: string]: never
  }>
>
export declare type GetProductsQueryHookResult = ReturnType<
  typeof useGetProductsQuery
>
export declare type GetProductsLazyQueryHookResult = ReturnType<
  typeof useGetProductsLazyQuery
>
export declare type GetProductsQueryResult = Apollo.QueryResult<
  GetProductsQuery,
  GetProductsQueryVariables
>
export declare const GetProductByIdDocument: Apollo.DocumentNode
/**
 * __useGetProductByIdQuery__
 *
 * To run a query within a React component, call `useGetProductByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProductByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProductByIdQuery({
 *   variables: {
 *      productId: // value for 'productId'
 *   },
 * });
 */
export declare function useGetProductByIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProductByIdQuery,
    GetProductByIdQueryVariables
  >
): Apollo.QueryResult<
  GetProductByIdQuery,
  Exact<{
    productId: any
  }>
>
export declare function useGetProductByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProductByIdQuery,
    GetProductByIdQueryVariables
  >
): Apollo.QueryTuple<
  GetProductByIdQuery,
  Exact<{
    productId: any
  }>
>
export declare type GetProductByIdQueryHookResult = ReturnType<
  typeof useGetProductByIdQuery
>
export declare type GetProductByIdLazyQueryHookResult = ReturnType<
  typeof useGetProductByIdLazyQuery
>
export declare type GetProductByIdQueryResult = Apollo.QueryResult<
  GetProductByIdQuery,
  GetProductByIdQueryVariables
>
